define(["QuadTree","MV","FrictionPhysics","AppObject"],function(e,b,d,a){var c=function(g){var f=this;f.dt=1/60;f.nIterations=100;f.beta=0.2;f.bodies=[];f.t=0;f.friction=1;f.contacts=[];f.gravity=90.81;f.width=4000;f.height=4000;f.joints=[];f.quadTree=new e([0,0,f.width,f.height],1);f.removes=[];f.useQuadTree=true;f.debug=false;f.set(g)};c.prototype=new a;c.prototype.step=function(){var w=this;w.computeContacts(w);var g=w.bodies;var u=g.length;var q;var f;var x;var s;var n;var k;var p;var o;var t;var m;var l=w.dt;var r;var h;var v;for(p=0;p<u;p++){q=g[p];f=q.mInv;if(f!=0&&q.dinamic){x=q.getRotationMatrix();n=q.forces;s=n.length;m=q.forcePoints;for(o=0;o<s;o++){t=m[o];k=n[o];h=l*f;q.set({vLin:[q.vLin[0]+k[0]*h,q.vLin[1]+k[1]*h]});if(t!==undefined){v=q.shape.vertices[t];r=(x[0][0]*v[0]+x[0][1]*v[1])*k[1]-(x[1][0]*v[0]+x[1][1]*v[1])*k[0]}}}}w.applyJoints();w.applyImpulses();w.move()};c.prototype.move=function(){var f=this;f.quadTree.clear();f.removes.forEach(function(h){var g=f.bodies.indexOf(h);if(g!=-1){f.bodies[g].destroy();f.bodies.splice(g,1)}});f.removes=[];f.bodies.forEach(function(h,k,j){h.index=k;var i=!0;if(h.dinamic){var l=b.VpV(h.center,b.SxV(f.dt,h.vLin)),g=f.dt*h.vAng;h.set({center:l});h.shape.set({theta:h.shape.theta+g});l=d.getAABB(h);if(!d.AABBoverlap(l,f.quadTree.AABB,0)){j[k].destroy();j.splice(k,1);i=!1}}i&&f.quadTree.add(h);h.vertsAbsolute=null;h.AABB=null})};c.prototype.clear=function(){var f=this;var g;for(g=0;g<f.bodies.length;g++){f.remove(f.bodies[g])}return f};c.prototype.add=function(f){var g=this;if(f.dinamic){f.set({forces:[[0,g.gravity*f.mass]],forcePoints:[]})}g.bodies.push(f);if(g.useQuadTree){g.quadTree.add(f)}f.set({index:g.bodies.length-1});return g};c.prototype.setGravity=function(k){k*=10;var g=this;var j=g.bodies.length;var h;var f;g.gravity=k;for(h=0;h<j;h++){f=g.bodies[h];if(f.dinamic){f.set({forces:[[0,g.gravity*f.mass]],forcePoints:[]})}}};c.prototype.remove=function(f,i){var g=this;i=i==undefined?false:i;if(!i){g.removes.push(f)}else{var h=g.bodies.indexOf(f);if(h!=-1){g.bodies.splice(h,1);if(g.useQuadTree){g.quadTree.remove(f)}}}};c.prototype.addJoint=function(g){var f=this;f.joints.push(g)};c.prototype.removeJoint=function(k){var g=this;var f=g.joints;var j=f.length;var h;for(h=0;h<j;h++){if(f[h]==k){f.splice(h,1);break}}};c.prototype.setFriction=function(g){var f=this;f.friction=g};c.prototype.computeContacts=function(){var f=this;var g=d.getCollisionCandidates(f);d.computeFaceNormals(f.bodies,g);f.contacts=[];var j=g.length;var l;var n;var m;var h;var k;for(h=0;h<j;h++){l=g[h];n=f.bodies[l[0]];m=f.bodies[l[1]];if(n.dinamic||m.dinamic){k=d.getContactsFromBodyPair(n,m);f.contacts=f.contacts.concat(k)}}};c.prototype.applyJoints=function(){var r=this;var D=r.joints;var p=D.length;if(p>0){var g=[];var u=[];var w=[];var x;var H;var F;var O;var f;var S;var U;var R;var N;var E=r.beta;var l=r.dt;var P;var C;var G;var M;var I=r.nIterations;var s;var q;var L;var K;var T;var z;var y;var o;var m;var B;var A;var t;var h;var Q;for(O=0;O<p;O++){x=D[O];U=x.bodyA;R=x.bodyB;f=U.center;S=R.center;z=x.vertexA;y=x.vertexB;s=U.mInv;q=R.mInv;L=U.moiInv;K=R.moiInv;g[O]=[q,q,K,s,s,L];T=x.type;if(T=="vertex"){H=U.getVerticesInWorldCoords()[z];F=R.getVerticesInWorldCoords()[y]}else{if(T=="center"){H=U.getVerticesInWorldCoords()[z];F=S}else{if(T=="surface"){H=[z[0]+f[0],z[1]+f[1]];F=[y[0]+S[0],y[1]+S[1]]}}}t=[H[0]-F[0],H[1]-F[1]];h=[F[0]-H[0],F[1]-H[1]];w[O]=[h[0]*2,h[1]*2,t[0]*(F[1]-S[1])-t[1]*(F[0]-S[0]),t[0],t[1],h[0]*(H[1]-f[1])-h[1]*(H[0]-f[0])];u[O]=E/l*(t[0]*t[0]+t[1]*t[1])}for(O=0;O<I;O++){for(N=0;N<p;N++){C=0;for(M=0;M<=5;M++){C+=g[N][M]*w[N][M]*w[N][M]}if(Math.abs(C)<=1e-15){continue}U=D[N].bodyA;R=D[N].bodyB;o=U.vLin;m=R.vLin;B=U.vAng;A=R.vAng;G=[m[0],m[1],A,o[0],o[1],B];Q=0;for(M=0;M<=5;M++){Q+=w[N][M]*G[M]}P=-(Q+u[N])/C;for(M=0;M<=5;M++){G[M]=P*w[N][M]*g[N][M]+G[M]}if(r.debug){R.set({vLin:[G[0],G[1]],vAng:G[2]});U.set({vLin:[G[3],G[4]],vAng:G[5]})}else{R.vLin=[G[0],G[1]];R.vAng=G[2];U.vLin=[G[3],G[4]];U.vAng=G[5]}}}}};c.prototype.applyImpulses=function(){var g=[];var t=[];var G=[];var J=[];var H=[];var T;var S;var r=this;var z=r.contacts;var p=z.length;var u;var ab;var Z;var o;var m;var B;var A;var s;var q;var Q;var P;var N;var M;var K;var f;var aa;var I=r.beta;var l=r.dt;var w;var h;var D=r.friction;var O=r.nIterations;var L;var x;var U;var E;var y;var F;var Y;var X;var W;var V;var R;for(T=0;T<p;T++){u=z[T];M=u.pA;K=u.pB;ab=u.bodyA;Z=u.bodyB;o=ab.vLin;m=Z.vLin;B=ab.vAng;A=Z.vAng;f=ab.center;aa=Z.center;s=ab.mInv;q=Z.mInv;Q=ab.moiInv;P=Z.moiInv;g[T]=[s,s,Q,q,q,P];N=u.normal;E=[M[0]-f[0],M[1]-f[1]];y=[K[0]-aa[0],K[1]-aa[1]];N.forEach(function(i){if(isNaN(i)){throw new TypeError("normal has Nan Values")}});E.forEach(function(i){if(isNaN(i)){throw new TypeError("pAcA has Nan Values")}});y.forEach(function(i){if(isNaN(i)){throw new TypeError("pAcB has Nan Values")}});J[T]=[N[0],N[1],E[0]*N[1]-E[1]*N[0],-N[0],-N[1],-(y[0]*N[1]-y[1]*N[0])];H[T]=[-N[1],N[0],E[0]*N[0]-E[1]*-N[1],N[1],-N[0],-((K[0]-aa[0])*-N[1]-(K[1]-aa[1])*-N[1])];h=((-(M[1]-f[1])*B+o[0])-(-(K[1]-aa[1])*A+m[0])*N[0])+(((M[0]-f[0])*B+o[1])-((K[0]-aa[0])*A+m[1])*N[1]);if(isNaN(h)){throw new TypeError("vPreNormal is Nan")}w=(M[0]-K[0])*N[0]+(M[1]-K[1])*N[1];if(isNaN(w)){throw new TypeError("C is Nan")}if(isNaN(I)){throw new TypeError("beta is Nan")}t[T]=I/l*((w<0)?w:0)+0.1*h;G[T]=0}J.forEach(function(i){if(isNaN(i)){throw new TypeError("Jn has nan values")}});H.forEach(function(i){if(isNaN(i)){throw new TypeError("Jt has nan values")}});t.forEach(function(i){if(isNaN(i)){throw new TypeError("bias has nan values")}});G.forEach(function(i){if(isNaN(i)){throw new TypeError("lambdaAcumulates has nan values")}});for(T=0;T<O;T++){for(S=0;S<p;S++){u=z[S];ab=u.bodyA;Z=u.bodyB;o=ab.vLin;m=Z.vLin;B=ab.vAng;A=Z.vAng;L=[o[0],o[1],B,m[0],m[1],A];Y=0;X=0;W=0;V=0;for(R=0;R<=5;R++){Y+=J[S][R]*L[R];X+=g[S][R]*J[S][R]*J[S][R];W+=H[S][R]*L[R];V+=g[S][R]*H[S][R]*H[S][R]}U=-(Y+t[S])/X;x=-W/V;if(G[S]+U<0){U=-G[S]}F=D*U;if(x>F){x=F}else{if(x<-F){x=-F}}G[S]+=U;for(R=0;R<=5;R++){L[R]=(g[S][R]*x*H[S][R])+((g[S][R]*U*J[S][R])+L[R])}if(isNaN(Y)){throw new TypeError("a is NaN")}if(isNaN(X)){throw new TypeError("b is NaN")}if(isNaN(W)){throw new TypeError("c is NaN")}if(isNaN(V)){throw new TypeError("d is NaN")}if(isNaN(t[S])){throw new TypeError("bias[j] is NaN")}if(isNaN(F)){throw new TypeError("fl is NaN")}if(isNaN(U)){throw new TypeError("lambda is NaN")}if(isNaN(x)){throw new TypeError("lambdaFriction is NaN")}G.forEach(function(i){if(isNaN(i)){throw new TypeError("lambda Acumulates has NaN values")}});L.forEach(function(i){if(i instanceof Array){i.forEach(function(j){if(isNaN(j)){throw new TypeError("va has NaN values")}})}else{if(isNaN(i)){throw new TypeError("va has NaN values")}}});if(r.debug){ab.set({vLin:[L[0],L[1]],vAng:L[2]});Z.set({vLin:[L[3],L[4]],vAng:L[5]})}else{ab.vLin=[L[0],L[1]];ab.vAng=L[2];Z.vLin=[L[3],L[4]];Z.vAng=L[5]}}}};c.prototype.getAABBsGroups=function(){var h=this;var g=h.bodies;var f=g.map(function(i){return d.getAABB(i)});return[[g,f]]};return c});