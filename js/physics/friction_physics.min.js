function getAABB(a) {
    a = a.getVerticesInWorldCoords();
    var d = [];
    d[0] = MV.min(a, 0);
    d[1] = MV.min(a, 1);
    d[2] = MV.max(a, 0);
    d[3] = MV.max(a, 1);
    return d
}
function AABBoverlap(a, d, b) {
    void 0 === b && (b = 0);
    return !(a[0] + b >= d[2] || a[2] <= d[0] + b || a[1] + b >= d[3] || a[3] <= d[1] + b)
}
function circleIntersectLine(a, d, b, c) {
    var e = MV.med(b, c), g = MV.getDegree(b, c);
    b = MV.rotate(b, -g, e);
    c = MV.rotate(c, -g, e);
    a = MV.rotate(a, -g, e);
    var e = Math.min(b[1], c[1]), g = Math.max(b[1], c[1]), h = Math.min(b[0], c[0]);
    c = Math.max(b[0], c[0]);
    return (a[0] <= b[0] && a[0] >= h - d || a[0] >= b[0] && a[0] <= c + d) && a[1] <= g + d && a[1] >= e - d
}
function getFaceNormals(a) {
    var d = [], b = a.length, c, e;
    for (c = 0; c < b; c++)e = MV.VmV(a[(c + 1) % a.length], a[c]), e = [-e[1], e[0]], d.push(MV.normalize(e));
    return d
}
function getCollisionCandidates(a) {
    a = a.quadTree.getAABBsGroups();
    var d = [], b, c, e = a.length, g, h, k, m, l, f;
    for (f = 0; f < e; f++)for (c = a[f], b = c[0], c = c[1], g = b.length, h = 0; h < g - 1; h++)for (k = h + 1; k < g; k++)m = b[h].groups, l = b[k].groups, compare(m, l) && AABBoverlap(c[h], c[k], 0) && (d.push([b[h].index, b[k].index]), d.push([b[k].index, b[h].index]));
    return d
}
function compare(a, d) {
    var b, c;
    for (b = 0; b < a.length; b++)for (c = 0; c < d.length; c++)if (a[b] == d[c])return !0;
    return !1
}
function computeFaceNormals(a, d) {
    for (var b = d.map(function (a) {
        return a[0]
    }).sort().filter(function (a, b, c) {
        return 0 === b || c[b] !== c[b - 1]
    }), c = b.length, e = 0; e < c; e++)a[b[e]].faceNormals = getFaceNormals(a[b[e]].getVerticesInWorldCoords())
}
var Contact = function (a, d, b, c, e) {
    this.bodyA = a;
    this.pA = d;
    this.bodyB = b;
    this.pB = c;
    this.normal = e
};
function linesIntersect(a, d, b, c) {
    var e = (d[0] - a[0]) * (c[1] - b[1]) - (d[1] - a[1]) * (c[0] - b[0]);
    if (.001 > Math.abs(e))return !1;
    c = ((c[0] - b[0]) * (a[1] - b[1]) - (c[1] - b[1]) * (a[0] - b[0])) / e;
    if (0 > c || 1 < c)return !1;
    a = ((d[1] - a[1]) * (b[0] - a[0]) - (d[0] - a[0]) * (b[1] - a[1])) / e;
    return 0 > a || 1 < a ? !1 : !0
}
function getContactsFromBodyPair(a, d) {
    var b = [], c = a.getVerticesInWorldCoords(), e = d.getVerticesInWorldCoords(), g = [], h = d.faceNormals, k = c.length, m = e.length, l, f, n, q, p;
    for (l = 0; l < k; l++) {
        n = c[l];
        for (f = 0; f < m; f++)g[f] = MV.dot(h[f], MV.VmV(n, e[f]));
        if (!g.some(function (a) {
                return 0 <= a
            })) {
            p = MV.minIndex(g);
            for (f = 0; f < m; f++)q = e[f], linesIntersect(n, a.shape.center, q, e[(f + 1) % e.length]) && (p = f);
            q = MV.VmV(n, MV.SxV(g[p], h[p]));
            b.push(new Contact(a, n, d, q, h[p]))
        }
    }
    return b
};
